#####################################################################
#  GitHub Action to perform continuous integration (CI) of database
#  changes using Liquibase IO
#####################################################################
name: 'Liquibase IO CI Workflow'
run-name: Continuous Integration of ${{github.ref}} to ${{github.base_ref}} by ${{ github.actor }}

# This workflow will execute whenever a pull request' is opened against
# the 'develop' branch.
#
# To extend CI to other environments, add their corresponding
# branches here.
on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - 'develop'
      - 'qa'
      - 'release/**'
  repository_dispatch:
    types: [ dispatch-event ]

#####################################################################
#  Set up the environment
#####################################################################
env:

  LIQUIBASE_IO_API_URL: "https://demo.liquibase.xyz/api/"


jobs:
  ####################################################################
  # Initialization runs first because it has no 'needs' value.
  ####################################################################
  init:
    name: Initialization
    # TODO This runs on a self-hosted runner with Liquibase preinstalled.
    # TODO In the future this will be a self-hosted runner for IO
    runs-on: [self-hosted]
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}

    steps:
      # Determine the environment based on the branch(es) that triggered this workflow.
      # Output "DEV", "QA", or "PROD" to $GITHUB_OUTPUT where job output parameters are
      # shared between jobs.
      - name: Set Environment
        id: set-environment
        run: |
          echo "environment=DEV" >> $GITHUB_OUTPUT
          if [[ "${{github.base_ref}}" == qa || "${{github.ref}}" == refs/heads/qa ]]; then
            echo "environment=QA" >> $GITHUB_OUTPUT
          fi
          if [[ "${{github.base_ref}}" == release* || "${{github.ref}}" == refs/heads/release* ]]; then
            echo "environment=PROD" >> $GITHUB_OUTPUT
          fi

  ####################################################################
  # Print out the selected environment to the log for troubleshooting.
  # This informational job runs in parallel with the checkout-repo job.
  ####################################################################
  print-environment:
    name: Environment information
    runs-on: [self-hosted]
    needs: [init]
    steps:
      - env:
          ENVIRONMENT: ${{needs.init.outputs.environment}}
        run: echo "The $ENVIRONMENT environment was selected."

  ####################################################################
  #  Perform the Database change control operations. In this case,
  #  run the checks.
  #####################################################################
  liquibase-checks:
    name: Run Custom Policy Checks in Liquibase.io
    needs: [init, print-environment]
    runs-on: [self-hosted]

    environment: ${{needs.init.outputs.environment}}

    steps:

      # Create a job from the workflow using the LBIO CLI:
      - name: Perform policy checks
        run: |
          echo 'Running workflow as job with curl API call (stubbed)...'
#          lbio workflow run {id} [--dispatch]
