#####################################################################
#  GitHub Action to perform continuous deployment (CD) of database
#  changes using Liquibase IO
#####################################################################
name: 'Liquibase IO CD Workflow'
run-name: Continuous Deployment of ${{github.ref}} by ${{ github.actor }}

# This workflow will execute whenever a 'push' event occurs on the
# 'develop' branch. A push event can occur due to several events,
# including merging a PR or bypassing rules and pushing directly to
# the branch as a repository administrator. When this workflow
# executes, it will deploy all pending changes, including any which
# have been previously rolled back.
#
# To extend CD to other environments, add their corresponding
# branches here.
on:
  push:
    branches:
      - 'develop'
  repository_dispatch:
    types: [ dispatch-event ]


#####################################################################
#  Set up the environment
#####################################################################
env:


LIQUIBASE_IO_API_URL: "https://demo.liquibase.xyz/api/"

jobs:
  ####################################################################
  # Initialization runs first because it has no 'needs' value.
  ####################################################################
  init:
    name: Initialization
    # This runs on a ubuntu-latest runner with Liquibase preinstalled.
    runs-on: [ubuntu-latest]

    # From init, we output the environment determined during the set-environment step below
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}

    steps:
      # Cancel any previous runs that are not completed for this workflow
      - name: Cancel previous workflow
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      # Determine the environment based on the branch(es) that triggered this workflow.
      # Output "DEV", "QA", or "PROD" to $GITHUB_OUTPUT where job output parameters are
      # shared between jobs.
      - name: Set Environment
        id: set-environment
        run: |
          echo "environment=DEV" >> $GITHUB_OUTPUT
          if [[ "${{github.base_ref}}" == qa || "${{github.ref}}" == refs/heads/qa ]]; then
            echo "environment=QA" >> $GITHUB_OUTPUT
          fi
          if [[ "${{github.base_ref}}" == release* || "${{github.ref}}" == refs/heads/release* ]]; then
            echo "environment=PROD" >> $GITHUB_OUTPUT
          fi

  ####################################################################
  # Print out the selected environment to the log for troubleshooting.
  # This informational job runs in parallel with the checkout-repo job.
  ####################################################################
  print-environment:
    name: Environment information
    runs-on: [ubuntu-latest]
    needs: [init]
    steps:
      - env:
          ENVIRONMENT: ${{needs.init.outputs.environment}}
        run: echo "The $ENVIRONMENT environment was selected."


  #####################################################################
  #  Perform the Database change control operations specified
  #  in the flowfile.
  #####################################################################
  liquibase-deployment:
    name: Database Deployment
    needs: [init, print-environment]
    runs-on: [ubuntu-latest]

    environment: ${{needs.init.outputs.environment}}

    steps:
      # Create a job from the workflow using the LBIO CLI:
      - name: Run deployment
        run: |
          echo 'Running workflow as job with curl API call (stubbed)...'
#          lbio workflow run {id} [--dispatch]
