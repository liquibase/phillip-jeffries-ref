#####################################################################
#  GitHub Action to perform a rollback of the previous update by
#  executing the flowfiles/liquibase-rollback.flowfile.yaml from
#  the adeelmalik78/Automations repository.
#
#  This workflow uses a workflow_dispatch trigger, and only allows
#  for manual execution. To run the workflow:
#  1. Go to the "Actions" tab of the repository.
#  2. Select the Liquibase Pro Rollback Utility.
#  3. Select the "Run Workflow button".
#  4. In the popup enter the appropriate
#     values below and click the "Run Workflow":
#       -"Use workflow from" -> select the appropriate branch
#       -"Environment" -> enter the environment to rollback
#       -"Liquibase log level" -> INFO is chosen by default.
#                                 Increase the log level if needed.
#
#####################################################################
name: 'Liquibase Pro Rollback One Update Workflow'
run-name: Rollback one update from ${{ inputs.environment }} using branch ${{github.ref}} by ${{ github.actor }}

on:

  workflow_dispatch:
    inputs:
      # The type 'environment' will automatically pull in the environments created in Settings->Environments
      environment:
        description: 'Environment:'
        type: environment
        default: 'DEV'
        required: true
      # For more info on log level, see: https://docs.liquibase.com/parameters/log-level.html
      log-level:
        description: 'Liquibase log level'
        required: false
        default: 'INFO'
        type: choice
        options: ['SEVERE','WARNING','INFO','FINE','OFF']

####################################################################
#  Set up the environment
#####################################################################
env:
  #  The top level Flow File that orchestrates the database changes
  #  We are using a flow which calls rollback-one-update-sql, and
  #  rollback-one-update: https://docs.liquibase.com/commands/rollback/rollback-one-update.html
  FLOW_FILE: "flowfiles/liquibase-rollback.flowfile.yaml"

  # The Liquibase Search Path controls how Liquibase finds it's configurations.
  # To ensure the correct config gets located first, keep "." at the end of this path.
  # See https://docs.liquibase.com/concepts/changelogs/how-liquibase-finds-files.html
  LIQUIBASE_SEARCH_PATH: "liquibase-sql/sqlcode_by_releases_db,."

  # Store the Liquibase Pro License key in a Github Action Repository Secret. The
  # same license key is used for all executions, so it is tracked at the repository level
  # See https://docs.liquibase.com/workflows/liquibase-pro/how-to-apply-your-liquibase-pro-license-key.html
  LIQUIBASE_LICENSE_KEY: ${{ secrets.LIQUIBASE_PRO_LICENSE_KEY }}

  # JDBC URL of the database per environment. Based on the incoming branch (one of DEV, QA, or PROD),
  # the corresponding secret will be taken from the Environment secrets.
  # See https://docs.liquibase.com/workflows/liquibase-community/using-jdbc-url-in-liquibase.html
  LIQUIBASE_COMMAND_URL: ${{ secrets.LIQUIBASE_COMMAND_URL }}

  # Credentials for the environment's database. Based on the incoming branch (one of DEV, QA, or PROD),
  # the corresponding secrets will be taken from the Environment secrets.
  # See https://docs.liquibase.com/parameters/command-parameters.html
  LIQUIBASE_COMMAND_USERNAME: ${{ secrets.LIQUIBASE_COMMAND_USERNAME }}
  LIQUIBASE_COMMAND_PASSWORD: ${{ secrets.LIQUIBASE_COMMAND_PASSWORD }}

  # Logging Settings
  # See https://docs.liquibase.com/parameters/log-format.html
  LIQUIBASE_LOG_FORMAT: JSON
  LIQUIBASE_LOG_LEVEL: INFO

jobs:
  ####################################################################
  #  Initialization
  ####################################################################
  init:
    name: Initialization
    runs-on: [ self-hosted ]
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}

    steps:
      # Cancel any previous runs that are not completed for this workflow
      - name: Cancel previous workflow
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      # Determine the environment based on the branch(es) that triggered this workflow.
      # Output "DEV", "QA", or "PROD" to $GITHUB_OUTPUT where job output parameters are
      # shared between jobs.
      - name: Set Environment
        id: set-environment
        run: |
          echo "environment=DEV" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.environment }}" == QA ]]; then
            echo "environment=QA" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.environment }}" == PROD ]]; then
            echo "environment=PROD" >> $GITHUB_OUTPUT
          fi

  ###################################################################
  #  Check out the source code
  ####################################################################
  checkout-repo:
    name: Check out repositories
    needs: [init]
    runs-on: [self-hosted]

    steps:
      # Check out the database change configuration code and workflows
      - name: Checkout Database Change Configuration repo
        uses: actions/checkout@v3

      # Check out the SQL Repo to a folder, "liquibase-sql"
      - name: Checkout Database Change SQL repo
        uses: actions/checkout@v4
        with:
          repository: liquibase/cs-impl-guide-examples-sql
          path: liquibase-sql

  #########################################################################
  #  Roll back
  #########################################################################
  liquibase-rollback-action:
    name: Roll back one Liquibase update
    runs-on: [self-hosted]
    needs: [checkout-repo, init]

    environment: ${{ inputs.environment }}

    steps:
      # Execute the Flow file
      - name: Run flow
        run: |
          liquibase --license-key=${{ secrets.LIQUIBASE_LICENSE_KEY }} \
             --changelog-file=rootchangelog_by_releases_db.yaml \
             flow \
             --flow-file=${{ env.FLOW_FILE }} \
             --logfile=logs/liquibase.log
